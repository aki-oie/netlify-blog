{"remainingRequest":"/Users/yamakawaak/Documents/aki-oie/netlify-blog/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/yamakawaak/Documents/aki-oie/netlify-blog/node_modules/vuepress-plugin-redirect/lib/enhanceApp.js","dependencies":[{"path":"/Users/yamakawaak/Documents/aki-oie/netlify-blog/node_modules/vuepress-plugin-redirect/lib/enhanceApp.js","mtime":499162500000},{"path":"/Users/yamakawaak/Documents/aki-oie/netlify-blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yamakawaak/Documents/aki-oie/netlify-blog/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb21lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX3R5cGVvZiBmcm9tICIvVXNlcnMveWFtYWthd2Fhay9Eb2N1bWVudHMvYWtpLW9pZS9uZXRsaWZ5LWJsb2cvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtaWdub3JlCi8vIEB0cy1pZ25vcmUKCmltcG9ydCBwbHVnaW5SZWRpcmVjdE9wdGlvbnMgZnJvbSAnQGR5bmFtaWMvcGx1Z2luLXJlZGlyZWN0LW9wdGlvbnMnOwp2YXIgb3B0aW9ucyA9IHBsdWdpblJlZGlyZWN0T3B0aW9uczsKCnZhciBlbmhhbmNlQXBwID0gZnVuY3Rpb24gZW5oYW5jZUFwcChfcmVmKSB7CiAgdmFyIHJvdXRlciA9IF9yZWYucm91dGVyLAogICAgICBzaXRlRGF0YSA9IF9yZWYuc2l0ZURhdGE7CiAgdmFyIF9yb3V0ZXIkb3B0aW9ucyRyb3V0ZSA9IHJvdXRlci5vcHRpb25zLnJvdXRlcywKICAgICAgcm91dGVzID0gX3JvdXRlciRvcHRpb25zJHJvdXRlID09PSB2b2lkIDAgPyBbXSA6IF9yb3V0ZXIkb3B0aW9ucyRyb3V0ZTsKICB2YXIgX29wdGlvbnMkcmVkaXJlY3RvcnMgPSBvcHRpb25zLnJlZGlyZWN0b3JzLAogICAgICByYXdSZWRpcmVjdG9ycyA9IF9vcHRpb25zJHJlZGlyZWN0b3JzID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJHJlZGlyZWN0b3JzOyAvLyBpZiBhIHBhdGggaGFzIGNvcnJlc3BvbmRpbmcgcm91dGUKCiAgZnVuY3Rpb24gaGFzUm91dGUocGF0aCkgewogICAgcmV0dXJuIHJvdXRlcy5zb21lKGZ1bmN0aW9uIChyb3V0ZSkgewogICAgICByZXR1cm4gcm91dGUucGF0aC50b0xvd2VyQ2FzZSgpID09PSBwYXRoLnRvTG93ZXJDYXNlKCk7CiAgICB9KTsKICB9IC8vIGdldCB0aGUgcm91dGUgb3IgZmFsbGJhY2sgcm91dGUgb2YgYSBwYXRoCgoKICBmdW5jdGlvbiBnZXRGYWxsYmFja1JvdXRlKHBhdGgpIHsKICAgIC8vIGlmIGhhcyBleGFjdCByb3V0ZQogICAgaWYgKGhhc1JvdXRlKHBhdGgpKSByZXR1cm4gcGF0aDsgLy8gaWYgaGFzIHJvdXRlIHdpdGggLwoKICAgIGlmICghL1wvJC8udGVzdChwYXRoKSkgewogICAgICB2YXIgZW5kaW5nU2xhc2hVcmwgPSBwYXRoICsgJy8nOwogICAgICBpZiAoaGFzUm91dGUoZW5kaW5nU2xhc2hVcmwpKSByZXR1cm4gZW5kaW5nU2xhc2hVcmw7CiAgICB9IC8vIGlmIGhhcyByb3V0ZSB3aXRoIC5odG1sCgoKICAgIGlmICghL1wuaHRtbCQvLnRlc3QocGF0aCkpIHsKICAgICAgdmFyIGVuZGluZ0h0bWxVcmwgPSBwYXRoLnJlcGxhY2UoL1wvJC8sICcnKSArICcuaHRtbCc7CiAgICAgIGlmIChoYXNSb3V0ZShlbmRpbmdIdG1sVXJsKSkgcmV0dXJuIGVuZGluZ0h0bWxVcmw7CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfSAvLyBsb2NhbGVzIHJlZGlyZWN0b3IKCgogIGlmIChvcHRpb25zLmxvY2FsZXMgJiYgc2l0ZURhdGEubG9jYWxlcykgewogICAgLy8gcmVzb2x2ZSBsb2NhbGVzIGNvbmZpZyBmcm9tIHNpdGVEYXRhCiAgICB2YXIgc2l0ZUxvY2FsZXMgPSBzaXRlRGF0YS5sb2NhbGVzOwogICAgdmFyIGxvY2FsZUtleXMgPSBPYmplY3Qua2V5cyhzaXRlTG9jYWxlcyk7CiAgICB2YXIgbG9jYWxlcyA9IGxvY2FsZUtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBrZXk6IGtleS5yZXBsYWNlKC9eXC98XC8kLywgJycpLAogICAgICAgIGxhbmc6IHNpdGVMb2NhbGVzW2tleV0ubGFuZwogICAgICB9OwogICAgfSk7IC8vIHJlc29sdmUgbG9jYWxlcyBjb25maWcgZnJvbSBwbHVnaW4gb3B0aW9ucwoKICAgIGlmIChfdHlwZW9mKG9wdGlvbnMubG9jYWxlcykgIT09ICdvYmplY3QnKSB7CiAgICAgIG9wdGlvbnMubG9jYWxlcyA9IHt9OwogICAgfQoKICAgIHZhciBfb3B0aW9ucyRsb2NhbGVzID0gb3B0aW9ucy5sb2NhbGVzLAogICAgICAgIGZhbGxiYWNrID0gX29wdGlvbnMkbG9jYWxlcy5mYWxsYmFjaywKICAgICAgICBfb3B0aW9ucyRsb2NhbGVzJHN0b3IgPSBfb3B0aW9ucyRsb2NhbGVzLnN0b3JhZ2UsCiAgICAgICAgc3RvcmFnZSA9IF9vcHRpb25zJGxvY2FsZXMkc3RvciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGxvY2FsZXMkc3RvcjsKCiAgICBpZiAoZmFsbGJhY2spIHsKICAgICAgbG9jYWxlS2V5cy51bnNoaWZ0KGZhbGxiYWNrKTsKICAgIH0gLy8gYWRkIGxvY2FsZXMgcmVkaXJlY3RvcgoKCiAgICByYXdSZWRpcmVjdG9ycy51bnNoaWZ0KHsKICAgICAgc3RvcmFnZTogc3RvcmFnZSwKICAgICAgYmFzZTogJy8nLAogICAgICBhbHRlcm5hdGl2ZTogZnVuY3Rpb24gYWx0ZXJuYXRpdmUoKSB7CiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHsKICAgICAgICAgIHZhciBsYW5ncyA9IHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2VzIHx8IFt3aW5kb3cubmF2aWdhdG9yLmxhbmd1YWdlXTsKICAgICAgICAgIHZhciBsb2NhbGUgPSBsb2NhbGVzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgICAgIHZhciBsYW5nID0gX3JlZjIubGFuZzsKICAgICAgICAgICAgcmV0dXJuIGxhbmdzLmluY2x1ZGVzKGxhbmcpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGxvY2FsZSkgewogICAgICAgICAgICByZXR1cm4gbG9jYWxlLmtleTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBsb2NhbGVLZXlzOwogICAgICB9CiAgICB9KTsKICB9IC8vIGFsbCByZWRpcmVjdG9ycwoKCiAgdmFyIHJlZGlyZWN0b3JzID0gcmF3UmVkaXJlY3RvcnMubWFwKGZ1bmN0aW9uIChfcmVmMykgewogICAgdmFyIF9yZWYzJGJhc2UgPSBfcmVmMy5iYXNlLAogICAgICAgIGJhc2UgPSBfcmVmMyRiYXNlID09PSB2b2lkIDAgPyAnLycgOiBfcmVmMyRiYXNlLAogICAgICAgIF9yZWYzJHN0b3JhZ2UgPSBfcmVmMy5zdG9yYWdlLAogICAgICAgIHJhd1N0b3JhZ2UgPSBfcmVmMyRzdG9yYWdlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzJHN0b3JhZ2UsCiAgICAgICAgYWx0ZXJuYXRpdmUgPSBfcmVmMy5hbHRlcm5hdGl2ZTsKICAgIHZhciBzdG9yYWdlID0gZmFsc2U7CgogICAgaWYgKHJhd1N0b3JhZ2UpIHsKICAgICAgaWYgKF90eXBlb2YocmF3U3RvcmFnZSkgIT09ICdvYmplY3QnKSB7CiAgICAgICAgdmFyIGtleSA9IHR5cGVvZiByYXdTdG9yYWdlICE9PSAnc3RyaW5nJyA/ICJ2dWVwcmVzczpyZWRpcmVjdDoiLmNvbmNhdChiYXNlKSA6IHJhd1N0b3JhZ2U7CiAgICAgICAgc3RvcmFnZSA9IHsKICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBudWxsOwogICAgICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2NhbFN0b3JhZ2UgPT09ICd1bmRlZmluZWQnKSByZXR1cm47CiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9IGVsc2UgaWYgKHJhd1N0b3JhZ2UuZ2V0ICYmIHJhd1N0b3JhZ2Uuc2V0KSB7CiAgICAgICAgLy8gd2FybmluZwogICAgICAgIHN0b3JhZ2UgPSByYXdTdG9yYWdlOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgYmFzZTogYmFzZSwKICAgICAgc3RvcmFnZTogc3RvcmFnZSwKICAgICAgYWx0ZXJuYXRpdmU6IGFsdGVybmF0aXZlCiAgICB9OwogIH0pOwogIHJvdXRlci5iZWZvcmVFYWNoKGZ1bmN0aW9uICh0bywgZnJvbSwgbmV4dCkgewogICAgLy8gaWYgcm91dGVyIGV4aXN0cywgc2tpcCByZWRpcmVjdGlvbgogICAgdmFyIGZhbGxiYWNrID0gZ2V0RmFsbGJhY2tSb3V0ZSh0by5wYXRoKTsKICAgIGlmIChmYWxsYmFjaykgcmV0dXJuIG5leHQoKTsKICAgIHZhciB0YXJnZXQ7CiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTsKICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDsKCiAgICB0cnkgewogICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSByZWRpcmVjdG9yc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHsKICAgICAgICB2YXIgcmVkaXJlY3RvciA9IF9zdGVwLnZhbHVlOwoKICAgICAgICB2YXIgX3JlZGlyZWN0b3IkYmFzZSA9IHJlZGlyZWN0b3IuYmFzZSwKICAgICAgICAgICAgYmFzZSA9IF9yZWRpcmVjdG9yJGJhc2UgPT09IHZvaWQgMCA/ICcvJyA6IF9yZWRpcmVjdG9yJGJhc2UsCiAgICAgICAgICAgIF9yZWRpcmVjdG9yJHN0b3JhZ2UgPSByZWRpcmVjdG9yLnN0b3JhZ2UsCiAgICAgICAgICAgIF9zdG9yYWdlID0gX3JlZGlyZWN0b3Ikc3RvcmFnZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVkaXJlY3RvciRzdG9yYWdlOwoKICAgICAgICB2YXIgYWx0ZXJuYXRpdmUgPSByZWRpcmVjdG9yLmFsdGVybmF0aXZlOwogICAgICAgIGlmICghdG8ucGF0aC5zdGFydHNXaXRoKGJhc2UpKSBjb250aW51ZTsgLy8gZ2V0IHJlc3Qgb2YgdGhlIHBhdGgKICAgICAgICAvLyBlbnN1cmUgZW5kaW5nIHNsYXNoIGF0IHJvb3QKCiAgICAgICAgdmFyIHJlc3QgPSB0by5wYXRoLnNsaWNlKGJhc2UubGVuZ3RoKSB8fCAnLyc7CgogICAgICAgIGlmIChfc3RvcmFnZSkgewogICAgICAgICAgdmFyIGFsdCA9IF9zdG9yYWdlLmdldChyZWRpcmVjdG9yKTsKCiAgICAgICAgICBpZiAoYWx0KSB7CiAgICAgICAgICAgIHZhciBwYXRoID0gZ2V0RmFsbGJhY2tSb3V0ZShqb2luKGJhc2UsIGFsdCwgcmVzdCkpOwoKICAgICAgICAgICAgaWYgKHBhdGgpIHsKICAgICAgICAgICAgICB0YXJnZXQgPSBwYXRoOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSAvLyByZXNvbHZlIGFsdGVybmF0aXZlcwoKCiAgICAgICAgaWYgKHR5cGVvZiBhbHRlcm5hdGl2ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgYWx0ZXJuYXRpdmUgPSBhbHRlcm5hdGl2ZShyZXN0KTsKICAgICAgICB9CgogICAgICAgIGlmICghYWx0ZXJuYXRpdmUpIGNvbnRpbnVlOwoKICAgICAgICBpZiAodHlwZW9mIGFsdGVybmF0aXZlID09PSAnc3RyaW5nJykgewogICAgICAgICAgYWx0ZXJuYXRpdmUgPSBbYWx0ZXJuYXRpdmVdOwogICAgICAgIH0KCiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTsKICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7CiAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBhbHRlcm5hdGl2ZVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkgewogICAgICAgICAgICB2YXIgX2FsdCA9IF9zdGVwMi52YWx1ZTsKCiAgICAgICAgICAgIHZhciBfcGF0aCA9IGdldEZhbGxiYWNrUm91dGUoam9pbihiYXNlLCBfYWx0LCByZXN0KSk7CgogICAgICAgICAgICBpZiAoX3BhdGgpIHsKICAgICAgICAgICAgICB0YXJnZXQgPSBfcGF0aDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTsKICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyWyJyZXR1cm4iXSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yMlsicmV0dXJuIl0oKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikgewogICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHRhcmdldCkgYnJlYWs7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycikgewogICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7CiAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyOwogICAgfSBmaW5hbGx5IHsKICAgICAgdHJ5IHsKICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yWyJyZXR1cm4iXSAhPSBudWxsKSB7CiAgICAgICAgICBfaXRlcmF0b3JbInJldHVybiJdKCk7CiAgICAgICAgfQogICAgICB9IGZpbmFsbHkgewogICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikgewogICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV4dCh0YXJnZXQpOwogIH0pOwogIHJvdXRlci5hZnRlckVhY2goZnVuY3Rpb24gKHRvKSB7CiAgICAvLyBpZiByb3V0ZXIgZG9lc24ndCBleGlzdCwgc2tpcCBzdG9yYWdlCiAgICBpZiAoIWhhc1JvdXRlKHRvLnBhdGgpKSByZXR1cm47CiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlOwogICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlOwogICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDsKCiAgICB0cnkgewogICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gcmVkaXJlY3RvcnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHsKICAgICAgICB2YXIgcmVkaXJlY3RvciA9IF9zdGVwMy52YWx1ZTsKICAgICAgICB2YXIgYmFzZSA9IHJlZGlyZWN0b3IuYmFzZSwKICAgICAgICAgICAgX3N0b3JhZ2UyID0gcmVkaXJlY3Rvci5zdG9yYWdlOwogICAgICAgIGlmICghX3N0b3JhZ2UyIHx8ICF0by5wYXRoLnN0YXJ0c1dpdGgoYmFzZSkpIGNvbnRpbnVlOwogICAgICAgIHZhciBhbHQgPSB0by5wYXRoLnNsaWNlKGJhc2UubGVuZ3RoKS5zcGxpdCgnLycpWzBdOwoKICAgICAgICBpZiAoYWx0KSB7CiAgICAgICAgICBfc3RvcmFnZTIuc2V0KGFsdCwgcmVkaXJlY3Rvcik7CiAgICAgICAgfQogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTsKICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyOwogICAgfSBmaW5hbGx5IHsKICAgICAgdHJ5IHsKICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjNbInJldHVybiJdICE9IG51bGwpIHsKICAgICAgICAgIF9pdGVyYXRvcjNbInJldHVybiJdKCk7CiAgICAgICAgfQogICAgICB9IGZpbmFsbHkgewogICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHsKICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMzsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9KTsKfTsKCmV4cG9ydCBkZWZhdWx0IGVuaGFuY2VBcHA7"},null]}